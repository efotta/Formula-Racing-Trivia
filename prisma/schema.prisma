generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model admin_settings {
  id        String   @id
  updatedAt DateTime
}

model feedback {
  id        String   @id
  username  String?
  message   String
  type      String   @default("general")
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([processed, createdAt])
}

model game_scores {
  id               String   @id
  userId           String
  level            Int
  score            Int
  maxScore         Int
  completedAt      DateTime
  timeTaken        Int?
  penaltyApplied   Int      @default(0)
  questionIds      String[]
  correctAnswers   Int
  incorrectAnswers Int

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, level])
  @@index([userId, completedAt])
  @@index([level, score])
}

model penalty_settings {
  id                  String   @id
  penalty_per_mistake Int      @default(10)
  minimum_penalty     Int      @default(0)
  last_updated        DateTime @default(now())
}

model perfect_runs {
  id          String   @id
  userId      String
  level       Int
  completedAt DateTime

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, level])
  @@index([userId])
  @@index([level])
}

model questions {
  id        String   @id
  question  String
  options   String[]
  answer    String
  level     Int
  createdAt DateTime @default(now())

  @@index([level])
}

model users {
  id                    String         @id
  username              String         @unique
  email                 String?        @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  twoFactorEnabled      Boolean        @default(false)
  twoFactorSecret       String?
  createdAt             DateTime       @default(now())
  lastLoginAt           DateTime?
  perfectLevels         Int[]
  completedLevels       Int[]
  accessibleLevels      Int[]          @default([1])
  scores                game_scores[]
  perfect_runs          perfect_runs[]
  accounts              Account[]
  sessions              Session[]
  Authenticator         Authenticator[]

  @@index([username])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
